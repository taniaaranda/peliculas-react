{"version":3,"sources":["components/Card/Card.js","containers/List.js","App.js","serviceWorker.js","firebase.js","components/Barra.js","components/Pelicula.js","components/MisPeliculas.js","index.js"],"names":["Card","movie","className","src","Poster","alt","Title","width","Year","Type","type","onClick","e","preventDefault","console","log","handleClick","API","List","state","data","searchTerm","error","loading","fetch","res","json","resJSON","this","setState","Search","onSubmit","handleSubmit","placeholder","onChange","target","value","autoFocus","map","i","key","React","Component","App","Boolean","window","location","hostname","match","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","Barra","Navbar","style","position","top","expand","variant","bg","fixed","Container","Brand","href","Pelicula","text","Img","Body","Subtitle","Text","method","then","response","result","alert","MisPeliculas","Row","backgroundColor","ReactDOM","render","StrictMode","exact","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.90b97e24.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from 'prop-types';\n\n\n\nfunction handleClick(e) {\n    e.preventDefault();\n    console.log('The link was clicked.');\n}\n\n\nconst Card = ({movie}) => {\n    return (\n        <div className=\"col-md-4\">\n            <div className=\"card\">\n                <img src={movie.Poster} alt={movie.Title} className=\"card-img-top\" width=\"100\"/>\n                <div className=\"card-body\">\n                    <h4>{movie.Title}{movie.Year}</h4>\n                    <p>{`Type: ${movie.Type}`}</p>\n                    <button type=\"button\" className=\"btn btn-outline-success\" onClick={(e) =>handleClick(e)}>Guardar</button>\n                </div>\n            </div>\n        </div>\n    )\n};\n\nCard.propTypes={\n    movie: PropTypes.shape({\n        Title: PropTypes.string,\n        Year: PropTypes.string,\n        Poster: PropTypes.string,\n        Type: PropTypes.string\n    }).isRequired   \n};\n\nexport default Card;","import React, {Fragment} from 'react';\nimport Card from '../components/Card/Card';\n\nconst API = 'http://www.omdbapi.com/?apikey=aa3fe5ee';\n\nclass List extends React.Component{\n\n    constructor(){\n        super();\n        this.state = {\n            data: [],\n            searchTerm:'',\n            error:'',\n            loading: true\n        }\n    }\n\n    async componentDidMount(){\n        const res =  await fetch(`${API}&s=batman`)\n        const resJSON = await res.json()\n        this.setState({data:resJSON.Search, loading: false})\n    }\n\n    async handleSubmit(e){\n        e.preventDefault();\n        if(!this.state.searchTerm){\n            return this.setState({error:'Debe escribir un texto valido'})\n        }\n        const res = await fetch(`${API}&s=${this.state.searchTerm}`)\n        const data = await res.json();\n        if(!data.Search){\n            return this.setState({error: 'No se encontaron resultados'})\n        }\n        this.setState({data: data.Search, error:'', searchTerm:''})\n    }\n\n    render(){\n        const {data, loading} = this.state;\n        if(loading){\n            return <h3 className=\"text-light\">Cargando</h3>        \n        }\n        return (\n            <Fragment>\n                <div className=\"row\">\n                    <div className=\"col-md-4 offset-md-4 p-4\">\n                        <form onSubmit={(e) => this.handleSubmit(e)}>\n                            <input type=\"text\" className=\"form-control\" \n                            placeholder=\"Buscar\" \n                            onChange={e => this.setState({searchTerm: e.target.value})}\n                            value={this.state.searchTerm}\n                            autoFocus/>\n                        </form>\n                        <p className=\"text-white\">{this.state.error ? this.state.error : ''}</p>\n                    </div>\n                </div>\n                <div className=\"row\">\n                    {\n                        data.map((movie, i) => {\n                            return <Card movie={movie} key={i}/>\n                        })\n                    }\n                </div>\n            </Fragment>\n        )\n    }\n}\n\nexport default List;","import React, {Fragment} from 'react';\nimport './App.css';\nimport List from \"./containers/List\";\n\nfunction App() {\n  return (\n    <Fragment>\n\n      <main>\n        <div className=\"container\">\n          <List/>\n        </div>\n      </main>\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import firebase from 'firebase/app'\nimport 'firebase/firestore'\n\n// Your web app's Firebase configuration\nvar firebaseConfig = {\n    apiKey: \"AIzaSyA-uVWRE72IepKCgRfKd_zQRuSZWcl2X_c\",\n    authDomain: \"peliculas-react.firebaseapp.com\",\n    databaseURL: \"https://peliculas-react.firebaseio.com\",\n    projectId: \"peliculas-react\",\n    storageBucket: \"peliculas-react.appspot.com\",\n    messagingSenderId: \"728000572191\",\n    appId: \"1:728000572191:web:65b3bc4cc2f07960ba1e2a\",\n    measurementId: \"G-C4B18345Y4\"\n  };\n\n  var firebaseConfigAnele = {\n    apiKey: \"AIzaSyAFSLOicO0TnKiur12zbfwQ9TPJWjkKlMI\",\n    authDomain: \"tp3appweb.firebaseapp.com\",\n    databaseURL: \"https://tp3appweb.firebaseio.com\",\n    projectId: \"tp3appweb\",\n    storageBucket: \"tp3appweb.appspot.com\",\n    messagingSenderId: \"828310208483\",\n    appId: \"1:828310208483:web:5f805ba7f9b43f860eaad6\"\n  };\n\n  // Initialize Firebase\n  const fb = firebase.initializeApp(firebaseConfigAnele); //REEMPLAZAR POR firebaseConfig. yo solo estoy probando con una mia\n  //firebase.analytics();\n  export const db = fb.firestore();","import React from 'react';\nimport {Navbar, Nav} from 'react-bootstrap';\nimport Container from 'react-bootstrap/Container';\nimport { FaCartPlus, FaUser } from 'react-icons/fa';\nimport {Link} from 'react-router-dom'\n\nclass Barra extends React.Component{\n\n    render(){\n        return(\n            <Navbar style={{position: \"sticky\", top: 0}} expand=\"lg\" variant=\"light\" bg=\"light\" fixed=\"top\">\n                <Container>\n                    <Navbar.Brand href=\"/\">Home</Navbar.Brand>\n                    <Navbar.Brand href=\"/mis_peliculas\">Peliculas guardadas</Navbar.Brand>\n                </Container>\n            </Navbar>\n        )\n    }\n}\nexport default Barra","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport {Row, Col, Card} from 'react-bootstrap/'\n\n\nfunction handleClick(e) {\n    const requestOptions = {\n        method: 'DELETE'\n      };\n      fetch(\"https://tp3appweb.firebaseio.com/nada.json\", requestOptions).then((response) => {\n        return response.json();\n      }).then((result) => {\n        alert(\"borrado\")\n      });\n}\n\n\nconst Pelicula = ({movie}) => {\n    console.log({movie})\n    return (\n        <div>\n            <div className=\"col-md-2 offset-md-2\">\n                <Card \n                    style={{ width: '13em' }} \n                    bg={'warning'}\n                    text={'warning' === 'light' ? 'dark' : 'white'}\n                    >\n                    <Card.Img variant=\"top\" src={movie.Poster}/>\n                    <Card.Body>\n                        <Card.Title>{movie.Title}</Card.Title>\n                        <Card.Subtitle className=\"mb-2 text-muted\">{`${movie.Type}`} | {`Año: ${movie.Year}`} </Card.Subtitle>\n                        <Card.Text>\n                     \n                        </Card.Text>\n                        <button type=\"button\" className=\"btn btn-outline-danger\" onClick={(e) =>handleClick(e)}>Eliminar de mi lista</button>\n                    </Card.Body>\n                </Card>\n            </div>\n        </div>   \n    )\n};\n\nPelicula.propTypes={\n    movie: PropTypes.shape({\n        Title: PropTypes.string,\n        Year: PropTypes.string,\n        Poster: PropTypes.string,\n        Type: PropTypes.string\n    }).isRequired   \n};\n\nexport default Pelicula;","import React, {Fragment} from 'react';\nimport Pelicula from '../components/Pelicula';\nimport {Container, Row} from 'react-bootstrap/'\n\nconst API = 'http://www.omdbapi.com/?i=tt3896198&apikey=aa3fe5ee';\nconst APIfirebase = 'todavianolatengo';\n\nclass MisPeliculas extends React.Component{\n\n    constructor(){\n        super();\n        this.state = {\n            data: [],\n            searchTerm:'',\n            error:'',\n            loading: true\n        }\n    }\n\n    async componentDidMount(){\n        const res =  await fetch(`${API}&s=batman`)\n        const resJSON = await res.json()\n        this.setState({data:resJSON.Search, loading: false})\n    }\n\n    async handleSubmit(e){\n        e.preventDefault();\n        if(!this.state.searchTerm){\n            return this.setState({error:'Debe escribir un texto valido'})\n        }\n        const res = await fetch(`${API}&s=${this.state.searchTerm}`)\n        const data = await res.json();\n        if(!data.Search){\n            return this.setState({error: 'No se encontaron resultados'})\n        }\n        this.setState({data: data.Search, error:'', searchTerm:''})\n    }\n\n    render(){\n        const {data, loading} = this.state;\n        if(loading){\n            return <h3 className=\"text-light\">Cargando</h3>        \n        }\n        return (\n            <Fragment>\n                <Container>\n                    <Row style={{backgroundColor:'white'}}>\n                        {\n                            data.map((movie, i) => {\n                                return <Pelicula movie={movie} key={i}/>\n                            })\n                        }\n                    </Row>\n                </Container>\n            </Fragment>\n        )\n    }\n}\n\nexport default MisPeliculas;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './firebase'\nimport 'bootswatch/dist/superhero/bootstrap.min.css'\nimport {BrowserRouter, Route, Switch} from 'react-router-dom'\nimport Barra from './components/Barra';\nimport MisPeliculas from './components/MisPeliculas';\n\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <div>\n        <BrowserRouter>\n          <Barra/>\n          <br/>\n            <Switch>\n                <Route exact path=\"/\" component={App} />\n                <Route exact path=\"/mis_peliculas\" component={MisPeliculas} /> \n              </Switch>\n        </BrowserRouter>\n      </div>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}